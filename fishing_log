# Final project fishing log program
import sys
from datetime import date
from fish import Fish

# import the user's existing fishing log cs521_fishing_log is the file

try:
    file = input("Please enter the file name of your previous fishing log: ")
    my_file = open(file,"r+")   
except FileNotFoundError as e:
    print(e, "Sorry, this file does not exist, please start over!")
    sys.exit()
else:
    print("\nThank you! Here is your last fishing log:\n")

# read the file and print out the current contents
data = my_file.read()

for line in data:
    print(line,end='')

# ask user where they would like to fish today and confirm for them
locations = ["Bay", "Ocean"]

print("\n\nPlease choose the location you are fishing at today:\n")
for loc in locations:
    print(loc)

while True:
    loc_preference = input("Where do you want to fish today? ")
    if loc_preference.title() not in locations:
        print("\nPlease choose from one of the two locations")
        continue
    else:
        break
    
print("\nOkay, you are fishing at the", loc_preference.title(), "today.")

# create game object based on the user input value
user_game = loc_preference.lower()+"_game"

# create acceptable set of game options specific to their location choice
ocean_game = {"perch", "salmon", "bass"}
bay_game = {"shark", "ray", "sturgeon"}

if user_game == "ocean_game":
    game = ocean_game
elif user_game == "bay_game":
    game = bay_game

# accept user input for fishing goal today
print("\n\n\n------- Let's set our Goal for today! --------")

while True:
    goal = input("How many fish do you want to catch today? Remember, the max\
 allowed per species is 10 per day! Please enter a positive integer only: ")
    if ',' in goal:
        print("\nPlease try again without entering commas.")
        continue
    elif "!" in goal or "\"" in goal or "#" in goal or "$" in\
        goal or "%" in goal or "&" in goal or "\\" in goal\
        or "?" in goal or "'" in goal or "(" in goal or ")" in\
        goal or "*" in goal or "+" in goal or "/" in goal or\
        ":" in goal or ";" in goal or "<" in goal or ">" in\
        goal or "=" in goal or "@" in goal or "[" in goal or\
        "]" in goal or "^" in goal or "_" in goal or "`" in\
        goal or "{" in goal or "}" in goal or "|" in goal or\
        "~" in goal or "\\" in goal:
        print("\nSorry, no punctation characters allowed, please try again.")
    elif goal.isalpha() or ' ' in goal:
        print("\n",goal,"is not a valid number. Please try again")
        continue
    elif goal == '':
        print("\nPlease enter a value: ")
        continue
    elif int(goal) <= 0:
        print("\nThat's not a positive integer, please try again!")
        continue
    elif int(goal) > 30:
        print("\nSorry, that goal exceeds the max limits, please try again!")
        continue
    else:
        break

# Tell the user we are going to start fishing
if 1 <= int(goal) <= 5:
    print("\nThat's a conservative goal, you can do it!")
elif 6 <= int(goal) <= 10:
    print("\nThat's a good goal, let's get started!")
elif 11 <= int(goal) <= 20:
    print("\nThat's an ambitious goal, let's get started!")
else:
    print("\nWow! That's a huge goal, let's get started!")
    
print("\n\n","-"*10,"Time to go fishing!","-"*10)

# create a list and dictionary object to store fishing records
fishing_list= []
new_fish_list = []

print("Since you are at the", loc_preference.title()+",","the type of fish\
 you can catch are:")
print(*game, sep=", ", end="")
    
while True:
    fish_caught = input("\nDid you catch a/another fish part of the current\
 game list? (y/n): ").lower()
    if fish_caught == "yes" or fish_caught == 'y':
        catch = input("What type of fish did you catch? ")
        if catch in game:
            fishing_list.append(catch)
        else:
            print("that fish isn't part of the current game list - please\
 take note of the fish you've caught that aren't part of your catches today")
        continue
    elif fish_caught == "no" or fish_caught == 'n':
        break
    elif fish_caught != "yes" or fish_caught != "no":
        print("\nPlease enter yes or no only: ")
        continue
    
while True:
    q1 = input("Did you catch a/another species of fish not part of the game\
 list? (y/n): ").lower()
    if q1 == "yes" or q1 == "y":
        new_fish = input("\nPlease enter a/another species of fish that you\
 caught that weren't part of the current game list: ")
        new_fish_list.append(new_fish)
    elif q1 == "no" or q1 == "n":
        print("\nHope you caught as many as you wanted today!")
        break
    elif q1 != "no" or q1 != "n":
        print("That isn't a valid response, please try again")
        continue             

# update set depending on the fishing location
if new_fish_list != []:
    game.update(new_fish_list)

# update the game object
if game == bay_game:
    bay_game = game
else:
    ocean_game = game

# create total_fish_list object and sort it
total_fish_list = fishing_list + new_fish_list
total_fish_list.sort()

# define function to turn the fishing log into a dictionary object
def create_fishing_log(total_fish_list):
    fishing_log = {}
    for fish in total_fish_list:
        if fish not in fishing_log.keys():
            fishing_log[fish] = 1
        else:
            fishing_log[fish] += 1
    return fishing_log

# call create fishing log function
todays_fishing_log = create_fishing_log(total_fish_list)

# print updated fishing log in tuple format
fish_list_tuples = todays_fishing_log.items()
fish_list_tuples = list(fish_list_tuples)

# let user know how they did, total caught, and if they met their goal
print("\nHere are your catches for today:")
for fish in fish_list_tuples:
    print(fish)
    
fish_count = 0
for k, v in todays_fishing_log.items():
    fish_count += v

print("Total fish caught today: ",fish_count)

# create count and logic to tell the user how they did today
count = sum(todays_fishing_log.values())
if count == 0:
    print("\nDon't feel bad about not catching anything, it happens to the\
 best of us! Since you caught no fish, you won't have a log today!")
    sys.exit()
elif count < int(goal)*0.50:   
    print("\nAw shucks, you didn't meet your goal today, better luck next\
 time!")
elif count <= int(goal)*0.90:
    print("\nYou were really close! You'll get it the next time you go\
 fishing!")
else:
    print("\nGreat job, you killed it today!")

# create taste list to use when invoking class call for final log output
taste_list = []
todays_fishing_set = set(todays_fishing_log)
unique_list = list(todays_fishing_set)
unique_list.sort()

# iterate through the unique fish list and append user choices
print("\nPlease enter your opinion on how each fish tastes for your log.")

for fish in unique_list:
    taste = input("how does " + fish + " taste to you?\n\nChoices:\nokay\nbad\
                  \ngood\nyummy\ndelicious\nweird\nunknown\n\n").lower()
    if taste not in Fish.TASTES:
        print("Please select one of the provided taste options.\n")
        continue
    elif taste in Fish.TASTES:
        taste_list.append(taste)
    
# create taste dictionary object based on the user's responses
taste_dict = dict(zip(unique_list,taste_list))

# create dictionary object and use class call to create full descriptions
fish_dict = {}
for i in range(len(total_fish_list)):
    species = total_fish_list[i]
    taste = taste_dict[species]
    fish_dict[species] = fish_dict.get(species, Fish(species = species,\
                         habitat = loc_preference.lower(),taste = taste))
                                       
# display user's dictionary object
print("\nThese are the type of fish you caught today with their habitat and\
 taste values:\n")
for k,v in fish_dict.items():
    print(k,":",v)

# prompt user to ask if all habitats look correct for their entries
updated_habitat_dict = {}

while True:
    user_check = input("Do the habitat values match what you want?\
 (y/n): ").lower()
    if user_check == "no" or user_check == "n":
        fish_to_fix = input("\nPlease enter the species you want to update\
 the habitat for: ").lower()
        if fish_to_fix not in fish_dict.keys():
            print("Please enter a fish from your log, try again.\n")
            continue
        else:
            #print(*fish_dict.keys(),sep=", ")
            #print("\n")
            print("Available habitats: ",Fish.HABITATS)
            new_habitat = input("Please enter a new habitat to update for\
 your fish: ").lower()
            updated_habitat_dict[fish_to_fix] = fish_dict[fish_to_fix].\
                _Fish__set_habitat(new_habitat) #using private method update
            #fish_dict[fish_to_fix] = Fish(species = fish_to_fix, habitat =\
            #new_habitat, taste = taste_dict[fish_to_fix])
            print("\nHere are your updated values: ")
            for k,v in fish_dict.items():
                print(k,":",v)
            continue
    elif user_check == "yes" or user_check == "y":
        break
    elif user_check != "yes" or user_check != "y":
        print("That isn't a valid response, please try again")
        continue
    
# prompt user to ask if all taste values look correct for their entries
updated_taste_dict = {}

while True:
    user_taste = input("Do the taste values match what you want?\
 (y/n): ").lower()
    if user_taste == "no" or user_taste == "n":
        fish_to_fix = input("\nPlease enter the species you want to update\
 the taste value for: ").lower()
        if fish_to_fix not in fish_dict.keys():
            print("Please enter a fish from your log, try again.\n")
            continue
        else:
            #print(*fish_dict.keys(),sep=", ")
            #print("\n")
            print("Available taste values: ",Fish.TASTES)
            new_taste = input("Please enter a new taste to update for\
 your fish: ").lower()
            updated_taste_dict[fish_to_fix] = fish_dict[fish_to_fix].\
                update_taste(new_taste) # using public method to update value
            #Fish(species = fish_to_fix, habitat =\
            #new_habitat, taste = taste_dict[fish_to_fix])
            print("\nHere are your updated values: ")
            for k,v in fish_dict.items():
                print(k,":",v)
            continue
    elif user_check == "yes" or user_check == "y":
        break
    elif user_check != "yes" or user_check != "y":
        print("That isn't a valid response, please try again")
        continue   
        
#2021-10-20_fishing_log.txt    
    
# create output to use in output file        
fish_output = "\n".join(str(v) for k, v in fish_dict.items())
updated_tastes = "\n".join(str(v) for k, v in updated_taste_dict.items())

# create a fishing log object based on today's date
today = date.today()
today_output = str(today) + "_fishing_log.txt"

# use the fishing log object as the output file name
output_file = open(today_output,"w")

# create file output contents for output file
header = "Fishing log for " + str(today) +": \n"
output_file.write(header)
output_file.write("-"*27)
output_file.write("\n\n")
output_file.write(str(fish_list_tuples))
output_file.write("\n\n")
output_file.write("-"*10)
output_file.write("Updated Fish and class attributes for the Habitat on this\
 day")
output_file.write("-"*10)
output_file.write("\n\n")
output_file.write(fish_output)
output_file.write("\n\nUpdated taste values: ")
output_file.write(updated_tastes)

print("\n\nThank you! Your fishing log for",today,"has been created!")

# close files at the end of the program
my_file.close()
output_file.close()


